LR Visualizer
========================================================
author: Michael Lyubinin
date: 10/25/2014
![Screenshot](Screen_Shot.png)
[mlyubinin.shinyapps.io/lr_visualizer](http://mlyubinin.shinyapps.io/lr_visualizer)

Why
========================================================

- Linear Regression is overused
  + Default in spreadsheets, Tableau and other tools
- Linear Regression is underused
  + After one look at non-linear association many run to other methods
- We need help to understand where LR can be a good fit
- Playing with interactive graphs is fun
- Hence, LR Visualizer

What
========================================================

- Generate 2-feature samples with somewhat randomized association:
  + Linear, Quadratic, Cubic, Exponential, Logarithmic
- Plot the sample
- Create LR
  + Examine fit
  + Look at distribution of residuals
  + Compare with Loess fit
  
But wait, there's more
========================================================

- Transform the sample
  + y^2 , $\sqrt{y}$, ln(y), -$\frac{1}{y}$, -$\frac{1}{\sqrt{y}}$
- Create LR on transformed sample
- Show LR on both transfomed and original sample
- Examine fit and residuals after reverse transform of $\hat{y}$

Example - LR of quadratic association
========================================================
```{r echo=FALSE, fig.width=12}
library(caret)
library(ggplot2)
library(grid)
library(gridExtra)
x = seq(10,110,1)
y = (4*x^2 + rnorm(101, mean=0, sd=5000))/1000
df = data.frame(x=x, y=y, tr_y=sqrt(y))
mdl_ln = train(y~x, data=df, method='lm')
mdl_tr = train(tr_y ~ x , data=df, method='lm')
df$yhat = predict(mdl_ln, df)
df$tr_yhat = predict(mdl_tr, df)^2
g1 = ggplot(df, aes(x=x, y=y)) + geom_point() + geom_point(aes(y=yhat), fill='red', size=2, shape=23) + 
  ggtitle('No transformation')
g2 = ggplot(df, aes(x=x, y=y)) + geom_point() + geom_point(aes(y=tr_yhat), fill='red', size=2, shape=23) +
  ggtitle('Square root transform')
g3 = ggplot(df, aes(x=x, y=y-yhat)) + geom_point() + geom_hline(yintercept=0) + ylab('residuals')
g4 = ggplot(df, aes(x=x, y=y-tr_yhat)) + geom_point() + geom_hline(yintercept=0) + ylab('residuals')
grid.arrange(g1, g2, g3, g4, ncol=2)
```